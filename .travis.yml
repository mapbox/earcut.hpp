language: cpp

before_install:
  - if [[ ${COVERITY_SCAN} == "1" ]]; then echo -n | openssl s_client -connect scan.coverity.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' | sudo tee -a /etc/ssl/certs/ca- ; fi

install:
  - if [[ ${COVERAGE} == "1" ]]; then
      gem install specific_install ;
      gem specific_install https://github.com/mrgreywater/coveralls-lcov fix-record-reading ;
      export CXXFLAGS="--coverage -fno-omit-frame-pointer -fno-default-inline -fno-inline -fno-exceptions -fno-unwind-tables" ;
    fi

before_script:
  - eval "${MATRIX_EVAL}"
  # download ccache from mason (to avoid slow homebrew install)
  - curl -sL https://mason-binaries.s3.amazonaws.com/${TRAVIS_OS_NAME}-x86_64/ccache/3.3.4.tar.gz | sudo tar --gunzip --extract --strip-components=1 --directory=/usr/local
  - ( mkdir -p build && cd build ; cmake .. -DCMAKE_BUILD_TYPE=${BUILDTYPE} -DEARCUT_WARNING_IS_ERROR=ON -DCMAKE_CXX_COMPILER_LAUNCHER="/usr/local/bin/ccache" )
  - if [[ -n $COVERITY_SCAN_TOKEN && ${COVERITY_SCAN} == "1" ]] ; then curl -s 'https://scan.coverity.com/scripts/travisci_build_coverity_scan.sh' | bash || true ; fi

script:
  - cd ${TRAVIS_BUILD_DIR}/build
  - make -j2
  - ./tests
  - echo -e "travis_fold:start:COVERALLS folding starts"
  - if [[ -n $COVERALLS_REPO_TOKEN && ${COVERAGE} == "1" ]]; then
      lcov -v && gcov -v ;
      lcov --gcov-tool /usr/bin/gcov-7 --compat-libtool --directory . --base-directory ../include/mapbox --no-external --capture --rc lcov_branch_coverage=1 --output-file coverage.info ;
      lcov --list coverage.info ;
      coveralls-lcov --repo-token ${COVERALLS_REPO_TOKEN} coverage.info ;
    fi
  - echo -e "travis_fold:end:COVERALLS folding ends"
  - ./bench

addons:
  apt:
    packages: &shared_linux_packages
      - xorg-dev
      - libgl1-mesa-dev

env:
  global:
    - COVERITY_SCAN_PROJECT_NAME="${TRAVIS_REPO_SLUG}"
    - COVERITY_SCAN_BRANCH_PATTERN="master"
    - COVERITY_SCAN_NOTIFICATION_EMAIL="4f7f3a820da643d180486972f68a251f.protect@whoisguard.com"
    - COVERITY_SCAN_BUILD_COMMAND_PREPEND="cov-configure --comptype g++ --compiler g++-7 --template && cd build"
    - COVERITY_SCAN_BUILD_COMMAND="make -j2"
    - CCACHE_TEMPDIR=/tmp/.ccache-temp
    - CCACHE_COMPRESS=1
    - CCACHE_DIR=${HOME}/.ccache

cache:
  directories:
    - ${HOME}/.ccache

matrix:
  fast_finish: true
  include:
    # clang5 debug
    - os: linux
      env:
        - BUILDTYPE=Debug
        - MATRIX_EVAL="CC=clang-5.0 && CXX=clang++-5.0"
      compiler: clang
      dist: xenial
      addons:
        apt:
          packages:
            - *shared_linux_packages
            - clang-5.0

    # clang3.8 release
    - os: linux
      env:
        - BUILDTYPE=Release
        - MATRIX_EVAL="CC=clang-3.8 && CXX=clang++-3.8"
      compiler: clang
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8
          packages:
            - *shared_linux_packages
            - clang-3.8

    # gcc7 debug with coverage
    - os: linux
      env:
        - BUILDTYPE=Debug
        - COVERAGE=1
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - *shared_linux_packages
            - g++-7
            - lcov

    # gcc7 release with coverity
    - os: linux
      env:
        - BUILDTYPE=Release
        - COVERITY_SCAN=1
        - MATRIX_EVAL="CC=gcc-7 && CXX=g++-7"
      compiler: gcc
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - *shared_linux_packages
            - g++-7

    # osx gcc
    - os: osx
      osx_image: xcode8
      env: BUILDTYPE=Release
      compiler: gcc

    # osx clang
    - os: osx
      osx_image: xcode8
      env: BUILDTYPE=Release
      compiler: clang
